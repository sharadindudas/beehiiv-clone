/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MainLayoutRouteRouteImport } from './routes/_main-layout/route'
import { Route as AuthLayoutRouteRouteImport } from './routes/_auth-layout/route'
import { Route as MainLayoutIndexRouteImport } from './routes/_main-layout/index'
import { Route as MainLayoutSegmentsIndexRouteImport } from './routes/_main-layout/segments/index'
import { Route as AuthLayoutRegisterIndexRouteImport } from './routes/_auth-layout/register/index'
import { Route as AuthLayoutLoginIndexRouteImport } from './routes/_auth-layout/login/index'

const MainLayoutRouteRoute = MainLayoutRouteRouteImport.update({
  id: '/_main-layout',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLayoutRouteRoute = AuthLayoutRouteRouteImport.update({
  id: '/_auth-layout',
  getParentRoute: () => rootRouteImport,
} as any)
const MainLayoutIndexRoute = MainLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainLayoutRouteRoute,
} as any)
const MainLayoutSegmentsIndexRoute = MainLayoutSegmentsIndexRouteImport.update({
  id: '/segments/',
  path: '/segments/',
  getParentRoute: () => MainLayoutRouteRoute,
} as any)
const AuthLayoutRegisterIndexRoute = AuthLayoutRegisterIndexRouteImport.update({
  id: '/register/',
  path: '/register/',
  getParentRoute: () => AuthLayoutRouteRoute,
} as any)
const AuthLayoutLoginIndexRoute = AuthLayoutLoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => AuthLayoutRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof MainLayoutIndexRoute
  '/login': typeof AuthLayoutLoginIndexRoute
  '/register': typeof AuthLayoutRegisterIndexRoute
  '/segments': typeof MainLayoutSegmentsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof MainLayoutIndexRoute
  '/login': typeof AuthLayoutLoginIndexRoute
  '/register': typeof AuthLayoutRegisterIndexRoute
  '/segments': typeof MainLayoutSegmentsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_auth-layout': typeof AuthLayoutRouteRouteWithChildren
  '/_main-layout': typeof MainLayoutRouteRouteWithChildren
  '/_main-layout/': typeof MainLayoutIndexRoute
  '/_auth-layout/login/': typeof AuthLayoutLoginIndexRoute
  '/_auth-layout/register/': typeof AuthLayoutRegisterIndexRoute
  '/_main-layout/segments/': typeof MainLayoutSegmentsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/register' | '/segments'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/register' | '/segments'
  id:
    | '__root__'
    | '/_auth-layout'
    | '/_main-layout'
    | '/_main-layout/'
    | '/_auth-layout/login/'
    | '/_auth-layout/register/'
    | '/_main-layout/segments/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthLayoutRouteRoute: typeof AuthLayoutRouteRouteWithChildren
  MainLayoutRouteRoute: typeof MainLayoutRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_main-layout': {
      id: '/_main-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainLayoutRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth-layout': {
      id: '/_auth-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthLayoutRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main-layout/': {
      id: '/_main-layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainLayoutIndexRouteImport
      parentRoute: typeof MainLayoutRouteRoute
    }
    '/_main-layout/segments/': {
      id: '/_main-layout/segments/'
      path: '/segments'
      fullPath: '/segments'
      preLoaderRoute: typeof MainLayoutSegmentsIndexRouteImport
      parentRoute: typeof MainLayoutRouteRoute
    }
    '/_auth-layout/register/': {
      id: '/_auth-layout/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthLayoutRegisterIndexRouteImport
      parentRoute: typeof AuthLayoutRouteRoute
    }
    '/_auth-layout/login/': {
      id: '/_auth-layout/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLayoutLoginIndexRouteImport
      parentRoute: typeof AuthLayoutRouteRoute
    }
  }
}

interface AuthLayoutRouteRouteChildren {
  AuthLayoutLoginIndexRoute: typeof AuthLayoutLoginIndexRoute
  AuthLayoutRegisterIndexRoute: typeof AuthLayoutRegisterIndexRoute
}

const AuthLayoutRouteRouteChildren: AuthLayoutRouteRouteChildren = {
  AuthLayoutLoginIndexRoute: AuthLayoutLoginIndexRoute,
  AuthLayoutRegisterIndexRoute: AuthLayoutRegisterIndexRoute,
}

const AuthLayoutRouteRouteWithChildren = AuthLayoutRouteRoute._addFileChildren(
  AuthLayoutRouteRouteChildren,
)

interface MainLayoutRouteRouteChildren {
  MainLayoutIndexRoute: typeof MainLayoutIndexRoute
  MainLayoutSegmentsIndexRoute: typeof MainLayoutSegmentsIndexRoute
}

const MainLayoutRouteRouteChildren: MainLayoutRouteRouteChildren = {
  MainLayoutIndexRoute: MainLayoutIndexRoute,
  MainLayoutSegmentsIndexRoute: MainLayoutSegmentsIndexRoute,
}

const MainLayoutRouteRouteWithChildren = MainLayoutRouteRoute._addFileChildren(
  MainLayoutRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthLayoutRouteRoute: AuthLayoutRouteRouteWithChildren,
  MainLayoutRouteRoute: MainLayoutRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
